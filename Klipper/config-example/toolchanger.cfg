[toolchanger]
  t_command_restore_axis: Z
  params_safe_y: 120
  params_close_y: 15  
  params_fast_speed: 30000 # Go as fast as we can
  params_path_speed: 900 # 20mm/s for the actual change
  params_type: 'rods_mini'   # See available paths below
  # The dropoff path of each tool type, pickup path is the same in reverse.
  params_pads_mini_path: [{'y':9, 'z':2}, {'y':8}, {'f':0.5}, {'z':-5}, {'y':1, 'z':-7}, {'y':3, 'z':-9}, {'y':7, 'z':-11}]
  params_pads_sb_path: [{'y':9.5, 'z':8}, {'y':9.5, 'z':2}, {'y':5.5}, {'f':0.5}, {'z':-5}, {'y':1, 'z':-7}, {'y':3, 'z':-9}, {'y':7, 'z':-11}]
  params_rods_mini_path: [{'y':4}, {'f':0.5}, {'z':-6}, {'z':-10, 'y':3}, {'z':-10, 'y':16}]
  params_rods_sb_path: [{'y':9.5, 'z':8}, {'y':9.5, 'z':2}, {'y':5.5}, {'f':0.5}, {'z':-6}, {'z':-10, 'y':3}, {'z':-10, 'y':16}]
  params_rods_mini_hookon_path: [{'y':4}, {'f':0.5}, {'z':-7.3}, {'z':-12.3, 'y':3.5}, {'z':-12.3, 'y':16}]
  # Parking position - per tool
  #params_park_x: 142.2
  #params_park_y: -6.0
  #params_park_z: 308.2
  # Default shaper params
  params_input_shaper_freq_x: 62.4
  params_input_shaper_freq_y: 88.6
  initialize_on: manual
  initialize_gcode:
    DETECT_ACTIVE_TOOL_PROBE
    _INITIALIZE_FROM_DETECTED_TOOL

  before_change_gcode: 
    TOOL_BEFORE_CHANGE TN={tool.name|replace('tool ', '', 1)}

  after_change_gcode: 
    TOOL_AFTER_CHANGE TN={tool.name|replace('tool ', '', 1)}
  
  dropoff_gcode:
    RESPOND TYPE=echo MSG='Dropping off {tool.name}'
    TOOL_DROPOFF TN={tool.name|replace('tool ', '', 1)}

  pickup_gcode:
    RESPOND TYPE=echo MSG='Picking up {tool.name}'
    TOOL_PICKUP TN={tool.name|replace('tool ', '', 1)}

[gcode_macro TOOL_BEFORE_CHANGE]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  {% if printer["gcode_macro T" + tool.tool_number|string ] %}
    SET_GCODE_VARIABLE MACRO=T{tool.tool_number} VARIABLE=color VALUE="''"
  {% endif %}

[gcode_macro TOOL_AFTER_CHANGE]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  {% if printer["gcode_macro T" + tool.tool_number|string ] %}
    SET_GCODE_VARIABLE MACRO=T{tool.tool_number} VARIABLE=color VALUE="'c44'"
  {% endif %}    
  {% if tool.params_input_shaper_freq_x %}
    SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y}
  {% endif %}

[gcode_macro TOOL_DROPOFF]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  {% set x = tool.params_park_x|float %} 
  {% set y = tool.params_park_y|float %} 
  {% set z = tool.params_park_z|float %}
  {% set safe_y = tool.params_safe_y|float %}
  {% set fast = tool.params_fast_speed|float %}
  {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set cur_z = printer.toolhead.position[2]|float %}
  RESPOND TYPE=echo MSG='Dropping off {tool.name}'
  G90
  ; Move 1 mm up to avoid crashing into things
  G0 Z{ [cur_z+1.0, max_z]|min } F{fast}    
  #   ##############  Move up to the dock  ##############    
  ROUNDED_G0 Y={safe_y} D=20 F={fast}
  ROUNDED_G0 X={x} D=150 F={fast}
  ROUNDED_G0 Z={z + path[0].get('z', 0)|float} D=20 F={fast}
  ROUNDED_G0 Y={y + path[0].get('y', 0)|float} X={x + path[0].get('x', 0)|float} D=0 F={fast}
  STOP_TOOL_PROBE_CRASH_DETECTION
  #  ############## Run the path ##############
  {% for pos in path %}
    G0 Y{y + pos.get('y', 0)|float} X{x + pos.get('x', 0)|float} Z{z + pos.get('z', 0)|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
  {% endfor %}

[gcode_macro TOOL_PICKUP]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  {% set x = tool.params_park_x|float %} 
  {% set y = tool.params_park_y|float %} 
  {% set z = tool.params_park_z|float %}
  {% set close_y = tool.params_close_y|float %}
  {% set fast = tool.params_fast_speed|float %}
  {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
  RESPOND TYPE=echo MSG='Picking up {tool.name}'
  G90
  #   ##############  Fast to the last point  ##############
  ROUNDED_G0 Y={close_y} F={fast} D=5
  ROUNDED_G0 X={x} Z={z + path[-1].get('z', 0)|float} F={fast} D=5
  ROUNDED_G0 Y={y + path[-1].get('y', 0)|float} X={x + path[-1].get('x', 0)|float} F={fast} D=0
  # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.
    
  {% if tool.extruder %}
    M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
  {% endif %}
  # Run the path in reverse
  {% for pos in path|reverse %}
    G0 Y{y + pos.get('y', 0)|float} X{x + pos.get('x', 0)|float} Z{z + pos.get('z', 0)|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }      
    {% if 'f' in pos %} # Use the f presence as marker that we have made contact with the tool.
      START_TOOL_PROBE_CRASH_DETECTION T={tool.tool_number}
    {% endif %}
  {% endfor %}
  # Restore the position with smooth rounded move.
  ROUNDED_G0 Y={tool.params_safe_y} F={fast} D=20
  {% if 'Z' in restore_position %}
    ROUNDED_G0 Z={restore_position.Z} F={fast} D=150
  {% endif %}
  {% if 'X' in restore_position %}
    ROUNDED_G0 X={restore_position.X} F={fast} D=1000
  {% endif %}
  {% if 'Y' in restore_position %}
    ROUNDED_G0 Y={restore_position.Y} F={fast} D=0
  {% endif %}
  ROUNDED_G0 D=0

[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number | int == -1 %} 
    RESPOND TYPE=error MSG='Failed to detect active tool'
    PAUSE
  {% else %}
    INITIALIZE_TOOLCHANGER T={printer.tool_probe_endstop.active_tool_number}
  {% endif %}    
 
[gcode_macro TOOL_ALIGN_START]
gcode:    
    INITIALIZE_TOOLCHANGER # Detect current tool
    _TOOL_ALIGN_START

[gcode_macro _TOOL_ALIGN_START]
gcode:
    STOP_TOOL_PROBE_CRASH_DETECTION
    {% set tool = printer[printer.toolchanger.tool] %}
    SET_TOOL_PARAMETER PARAMETER='params_path_speed' VALUE=300
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
    G0 X{tool.params_park_x} Z{tool.params_park_z}
    G0 Y{tool.params_park_y|float + 100.0}

[gcode_macro TOOL_ALIGN_TEST]
gcode:
    {% set curpos = printer.gcode_move.gcode_position %}
    {% if curpos[1] > 0 %} 
      # Check if Y is not too far, to very unrealistic tests.
      RESPOND TYPE=error MSG='Test aborted. Tool too far away from the dock.'
    {% else %}
      INITIALIZE_TOOLCHANGER # Detect current tool
      STOP_TOOL_PROBE_CRASH_DETECTION
      SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
      SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
      SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={curpos[2]}
      TEST_TOOL_DOCKING RESTORE_AXIS=XYZ
      STOP_TOOL_PROBE_CRASH_DETECTION
    {% endif %}

[gcode_macro TOOL_ALIGN_DONE]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SAVE_TOOL_PARAMETER PARAMETER='params_park_x'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_y'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_z'
    RESET_TOOL_PARAMETER PARAMETER='params_path_speed'
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}

[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE{newparameters}
  {% else %}
    M104.1 {rawparams}
  {% endif %}


[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>]
  Set tool temperature and wait.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE WAIT=1 {newparameters}
  {% else %}
    M109.1 {rawparams}
  {% endif %}
